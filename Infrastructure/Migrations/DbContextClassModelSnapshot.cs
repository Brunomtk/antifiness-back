// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DbContextClass))]
    partial class DbContextClassModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Client.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("CurrentWeight")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("KanbanStage")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PlanId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double?>("TargetWeight")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Core.Models.Client.ClientGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("TargetValue")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientGoals");
                });

            modelBuilder.Entity("Core.Models.Client.ClientMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Arms")
                        .HasColumnType("double precision");

                    b.Property<double?>("BodyFat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Chest")
                        .HasColumnType("double precision");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("MuscleMass")
                        .HasColumnType("double precision");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<double?>("Thighs")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Waist")
                        .HasColumnType("double precision");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientMeasurements");
                });

            modelBuilder.Entity("Core.Models.Course.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("EmpresasId")
                        .HasColumnType("integer");

                    b.Property<string>("Instructor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmpresasId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Core.Models.Course.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmpresasId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ProgressPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("EmpresasId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Core.Models.Course.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Core.Models.Course.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WatchTimeMinutes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("LessonId");

                    b.ToTable("Progress");
                });

            modelBuilder.Entity("Core.Models.Course.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Core.Models.Diet.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DailyCalories")
                        .HasColumnType("double precision");

                    b.Property<double?>("DailyCarbs")
                        .HasColumnType("double precision");

                    b.Property<double?>("DailyFat")
                        .HasColumnType("double precision");

                    b.Property<double?>("DailyFiber")
                        .HasColumnType("double precision");

                    b.Property<double?>("DailyProtein")
                        .HasColumnType("double precision");

                    b.Property<double?>("DailySodium")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Restrictions")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("Core.Models.Diet.DietMeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DietId")
                        .HasColumnType("integer");

                    b.Property<string>("Instructions")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<TimeSpan?>("ScheduledTime")
                        .HasColumnType("interval");

                    b.Property<double?>("TotalCalories")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalCarbs")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalFat")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalProtein")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.ToTable("DietMeals");
                });

            modelBuilder.Entity("Core.Models.Diet.DietMealFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Calories")
                        .HasColumnType("double precision");

                    b.Property<double?>("Carbs")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Fat")
                        .HasColumnType("double precision");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int?>("FoodId1")
                        .HasColumnType("integer");

                    b.Property<int>("MealId")
                        .HasColumnType("integer");

                    b.Property<double?>("Protein")
                        .HasColumnType("double precision");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FoodId1");

                    b.HasIndex("MealId");

                    b.ToTable("DietMealFoods");
                });

            modelBuilder.Entity("Core.Models.Diet.DietProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CaloriesConsumed")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DietId")
                        .HasColumnType("integer");

                    b.Property<double?>("EnergyLevel")
                        .HasColumnType("double precision");

                    b.Property<double?>("HungerLevel")
                        .HasColumnType("double precision");

                    b.Property<int>("MealsCompleted")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("SatisfactionLevel")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalMeals")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.ToTable("DietProgress");
                });

            modelBuilder.Entity("Core.Models.Diet.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergens")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double>("CaloriesPer100g")
                        .HasColumnType("double precision");

                    b.Property<double?>("CarbsPer100g")
                        .HasColumnType("double precision");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("CommonPortions")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double?>("FatPer100g")
                        .HasColumnType("double precision");

                    b.Property<double?>("FiberPer100g")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double?>("ProteinPer100g")
                        .HasColumnType("double precision");

                    b.Property<double?>("SodiumPer100g")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Core.Models.Empresas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CNPJ")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Core.Models.Feedback.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminResponse")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Core.Models.Message.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EmpresasId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LastMessageId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UnreadCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmpresasId");

                    b.HasIndex("LastMessageId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Core.Models.Message.ConversationParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("Core.Models.Message.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReplyToId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReplyToId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Core.Models.Message.MessageAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageAttachments");
                });

            modelBuilder.Entity("Core.Models.Message.MessageReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReactions");
                });

            modelBuilder.Entity("Core.Models.Message.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EmpresasId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmpresasId");

                    b.ToTable("MessageTemplates");
                });

            modelBuilder.Entity("Core.Models.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionLabel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Core.Models.Notification.NotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("boolean");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("SmsNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Core.Models.Notification.NotificationSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("P256dhKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSubscriptions");
                });

            modelBuilder.Entity("Core.Models.Notification.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("Core.Models.Nutrition.FoodMicronutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPer100g")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("MicronutrientTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MicronutrientTypeId");

                    b.ToTable("FoodMicronutrients");
                });

            modelBuilder.Entity("Core.Models.Nutrition.MicronutrientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFatSolubleVitamin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTraceMineral")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MicronutrientTypes");
                });

            modelBuilder.Entity("Core.Models.Plan.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("NutritionistId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TargetCalories")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TargetWeight")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("NutritionistId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Core.Models.Plan.PlanFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlanMealId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlanMealId");

                    b.ToTable("PlanFoods");
                });

            modelBuilder.Entity("Core.Models.Plan.PlanGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Current")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<double>("Target")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanGoals");
                });

            modelBuilder.Entity("Core.Models.Plan.PlanMeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Instructions")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanMeals");
                });

            modelBuilder.Entity("Core.Models.Plan.PlanProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MealsCompleted")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMeals")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanProgress");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Models.Workout.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Instructions")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaUrls")
                        .HasColumnType("text");

                    b.Property<string>("MuscleGroups")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Tips")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Variations")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Core.Models.Workout.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int?>("EstimatedCalories")
                        .HasColumnType("integer");

                    b.Property<int?>("EstimatedDuration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Core.Models.Workout.WorkoutExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompletedSets")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("Reps")
                        .HasColumnType("integer");

                    b.Property<int?>("RestTime")
                        .HasColumnType("integer");

                    b.Property<int?>("Sets")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutExercises");
                });

            modelBuilder.Entity("Core.Models.Workout.WorkoutProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActualCalories")
                        .HasColumnType("integer");

                    b.Property<int?>("ActualDuration")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EnergyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ExerciseProgress")
                        .HasColumnType("text");

                    b.Property<bool>("HasPersonalRecord")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Mood")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutProgress");
                });

            modelBuilder.Entity("Core.Models.Client.Client", b =>
                {
                    b.OwnsOne("Core.Models.Client.ClientPreferences", "Preferences", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.OwnsOne("Core.Models.Client.MealTimes", "MealTimes", b2 =>
                                {
                                    b2.Property<int>("ClientPreferencesClientId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Breakfast")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Dinner")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Lunch")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("ClientPreferencesClientId");

                                    b2.ToTable("Clients");

                                    b2.WithOwner()
                                        .HasForeignKey("ClientPreferencesClientId");
                                });

                            b1.OwnsOne("Core.Models.Client.WorkoutPreferences", "WorkoutPreferences", b2 =>
                                {
                                    b2.Property<int>("ClientPreferencesClientId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Duration")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Frequency")
                                        .HasColumnType("integer");

                                    b2.Property<string>("TimeOfDay")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("ClientPreferencesClientId");

                                    b2.ToTable("Clients");

                                    b2.WithOwner()
                                        .HasForeignKey("ClientPreferencesClientId");
                                });

                            b1.Navigation("MealTimes")
                                .IsRequired();

                            b1.Navigation("WorkoutPreferences")
                                .IsRequired();
                        });

                    b.Navigation("Preferences")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Client.ClientGoal", b =>
                {
                    b.HasOne("Core.Models.Client.Client", "Client")
                        .WithMany("Goals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Models.Client.ClientMeasurement", b =>
                {
                    b.HasOne("Core.Models.Client.Client", "Client")
                        .WithMany("Measurements")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Models.Course.Course", b =>
                {
                    b.HasOne("Core.Models.Empresas", "Empresas")
                        .WithMany()
                        .HasForeignKey("EmpresasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("Core.Models.Course.Enrollment", b =>
                {
                    b.HasOne("Core.Models.Course.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Empresas", "Empresas")
                        .WithMany()
                        .HasForeignKey("EmpresasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Empresas");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Course.Lesson", b =>
                {
                    b.HasOne("Core.Models.Course.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Core.Models.Course.Progress", b =>
                {
                    b.HasOne("Core.Models.Course.Enrollment", "Enrollment")
                        .WithMany("Progress")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Course.Lesson", "Lesson")
                        .WithMany("Progress")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Core.Models.Course.Review", b =>
                {
                    b.HasOne("Core.Models.Course.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Diet.Diet", b =>
                {
                    b.HasOne("Core.Models.Client.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Models.Nutrition.MicronutrientProfile", "Micros", b1 =>
                        {
                            b1.Property<int>("DietId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Calcium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Calcium");

                            b1.Property<decimal?>("Copper")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Copper");

                            b1.Property<decimal?>("Folate")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Folate");

                            b1.Property<decimal?>("Iodine")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Iodine");

                            b1.Property<decimal?>("Iron")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Iron");

                            b1.Property<decimal?>("Magnesium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Magnesium");

                            b1.Property<decimal?>("Manganese")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Manganese");

                            b1.Property<decimal?>("Phosphorus")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Phosphorus");

                            b1.Property<decimal?>("Potassium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Potassium");

                            b1.Property<decimal?>("Selenium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Selenium");

                            b1.Property<decimal?>("Sodium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Sodium");

                            b1.Property<decimal?>("VitaminA")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminA");

                            b1.Property<decimal?>("VitaminB1")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB1");

                            b1.Property<decimal?>("VitaminB12")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB12");

                            b1.Property<decimal?>("VitaminB2")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB2");

                            b1.Property<decimal?>("VitaminB3")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB3");

                            b1.Property<decimal?>("VitaminB6")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB6");

                            b1.Property<decimal?>("VitaminC")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminC");

                            b1.Property<decimal?>("VitaminD")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminD");

                            b1.Property<decimal?>("VitaminE")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminE");

                            b1.Property<decimal?>("VitaminK")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminK");

                            b1.Property<decimal?>("Zinc")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Zinc");

                            b1.HasKey("DietId");

                            b1.ToTable("Diets");

                            b1.WithOwner()
                                .HasForeignKey("DietId");
                        });

                    b.Navigation("Client");

                    b.Navigation("Empresa");

                    b.Navigation("Micros");
                });

            modelBuilder.Entity("Core.Models.Diet.DietMeal", b =>
                {
                    b.HasOne("Core.Models.Diet.Diet", "Diet")
                        .WithMany("Meals")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("Core.Models.Diet.DietMealFood", b =>
                {
                    b.HasOne("Core.Models.Diet.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.Diet.Food", null)
                        .WithMany("MealFoods")
                        .HasForeignKey("FoodId1");

                    b.HasOne("Core.Models.Diet.DietMeal", "Meal")
                        .WithMany("Foods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Core.Models.Diet.DietProgress", b =>
                {
                    b.HasOne("Core.Models.Diet.Diet", "Diet")
                        .WithMany("Progress")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("Core.Models.Diet.Food", b =>
                {
                    b.OwnsOne("Core.Models.Nutrition.MicronutrientProfile", "Micros", b1 =>
                        {
                            b1.Property<int>("FoodId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Calcium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Calcium");

                            b1.Property<decimal?>("Copper")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Copper");

                            b1.Property<decimal?>("Folate")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Folate");

                            b1.Property<decimal?>("Iodine")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Iodine");

                            b1.Property<decimal?>("Iron")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Iron");

                            b1.Property<decimal?>("Magnesium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Magnesium");

                            b1.Property<decimal?>("Manganese")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Manganese");

                            b1.Property<decimal?>("Phosphorus")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Phosphorus");

                            b1.Property<decimal?>("Potassium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Potassium");

                            b1.Property<decimal?>("Selenium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Selenium");

                            b1.Property<decimal?>("Sodium")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Sodium");

                            b1.Property<decimal?>("VitaminA")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminA");

                            b1.Property<decimal?>("VitaminB1")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB1");

                            b1.Property<decimal?>("VitaminB12")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB12");

                            b1.Property<decimal?>("VitaminB2")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB2");

                            b1.Property<decimal?>("VitaminB3")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB3");

                            b1.Property<decimal?>("VitaminB6")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminB6");

                            b1.Property<decimal?>("VitaminC")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminC");

                            b1.Property<decimal?>("VitaminD")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminD");

                            b1.Property<decimal?>("VitaminE")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminE");

                            b1.Property<decimal?>("VitaminK")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_VitaminK");

                            b1.Property<decimal?>("Zinc")
                                .HasColumnType("numeric")
                                .HasColumnName("Micros_Zinc");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.WithOwner()
                                .HasForeignKey("FoodId");
                        });

                    b.Navigation("Micros");
                });

            modelBuilder.Entity("Core.Models.Empresas", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Empresas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Feedback.Feedback", b =>
                {
                    b.HasOne("Core.Models.Client.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Core.Models.Message.Conversation", b =>
                {
                    b.HasOne("Core.Models.Empresas", "Empresas")
                        .WithMany()
                        .HasForeignKey("EmpresasId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Models.Message.Message", "LastMessage")
                        .WithMany()
                        .HasForeignKey("LastMessageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Core.Models.Message.ConversationSettings", "Settings", b1 =>
                        {
                            b1.Property<int>("ConversationId")
                                .HasColumnType("integer");

                            b1.Property<bool>("AutoArchive")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Notifications")
                                .HasColumnType("boolean");

                            b1.Property<int?>("RetentionDays")
                                .HasColumnType("integer");

                            b1.Property<bool>("SoundEnabled")
                                .HasColumnType("boolean");

                            b1.HasKey("ConversationId");

                            b1.ToTable("Conversations");

                            b1.WithOwner()
                                .HasForeignKey("ConversationId");
                        });

                    b.Navigation("Empresas");

                    b.Navigation("LastMessage");

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Message.ConversationParticipant", b =>
                {
                    b.HasOne("Core.Models.Message.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Models.Message.ParticipantPermissions", "Permissions", b1 =>
                        {
                            b1.Property<int>("ConversationParticipantId")
                                .HasColumnType("integer");

                            b1.Property<bool>("CanAddParticipants")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanDeleteMessages")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanEditConversation")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanRemoveParticipants")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanSendAttachments")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanSendMessages")
                                .HasColumnType("boolean");

                            b1.HasKey("ConversationParticipantId");

                            b1.ToTable("ConversationParticipants");

                            b1.WithOwner()
                                .HasForeignKey("ConversationParticipantId");
                        });

                    b.Navigation("Conversation");

                    b.Navigation("Permissions")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Message.Message", b =>
                {
                    b.HasOne("Core.Models.Message.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Models.Message.Message", "ReplyTo")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Core.Models.Message.MessageMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("MessageId")
                                .HasColumnType("integer");

                            b1.Property<string>("CustomData")
                                .HasColumnType("text");

                            b1.Property<string>("EditReason")
                                .HasColumnType("text");

                            b1.Property<bool>("Edited")
                                .HasColumnType("boolean");

                            b1.Property<string>("SystemAction")
                                .HasColumnType("text");

                            b1.HasKey("MessageId");

                            b1.ToTable("Messages");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");
                        });

                    b.Navigation("Conversation");

                    b.Navigation("Metadata")
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("ReplyTo");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Core.Models.Message.MessageAttachment", b =>
                {
                    b.HasOne("Core.Models.Message.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Models.Message.AttachmentMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("MessageAttachmentId")
                                .HasColumnType("integer");

                            b1.Property<string>("CustomData")
                                .HasColumnType("text");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<int?>("Duration")
                                .HasColumnType("integer");

                            b1.Property<int?>("Height")
                                .HasColumnType("integer");

                            b1.Property<int?>("Width")
                                .HasColumnType("integer");

                            b1.HasKey("MessageAttachmentId");

                            b1.ToTable("MessageAttachments");

                            b1.WithOwner()
                                .HasForeignKey("MessageAttachmentId");
                        });

                    b.Navigation("Message");

                    b.Navigation("Metadata")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Message.MessageReaction", b =>
                {
                    b.HasOne("Core.Models.Message.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Message.MessageTemplate", b =>
                {
                    b.HasOne("Core.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.Empresas", "Empresas")
                        .WithMany()
                        .HasForeignKey("EmpresasId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Core.Models.Message.TemplateVariables", "Variables", b1 =>
                        {
                            b1.Property<int>("MessageTemplateId")
                                .HasColumnType("integer");

                            b1.Property<List<string>>("Variables")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("MessageTemplateId");

                            b1.ToTable("MessageTemplates");

                            b1.WithOwner()
                                .HasForeignKey("MessageTemplateId");
                        });

                    b.Navigation("Creator");

                    b.Navigation("Empresas");

                    b.Navigation("Variables")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Notification.Notification", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Models.Notification.NotificationData", "Data", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("integer");

                            b1.Property<int?>("EntityId")
                                .HasColumnType("integer");

                            b1.Property<string>("EntityType")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("ImageUrl")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("Metadata")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.Property<double?>("Progress")
                                .HasColumnType("double precision");

                            b1.Property<string>("Unit")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<double?>("Value")
                                .HasColumnType("double precision");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notifications");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.Navigation("Data");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Notification.NotificationSettings", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Models.Notification.NotificationCategorySettings", "Categories", b1 =>
                        {
                            b1.Property<int>("NotificationSettingsId")
                                .HasColumnType("integer");

                            b1.Property<bool>("Error")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Info")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Reminder")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Success")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Warning")
                                .HasColumnType("boolean");

                            b1.HasKey("NotificationSettingsId");

                            b1.ToTable("NotificationSettings");

                            b1.WithOwner()
                                .HasForeignKey("NotificationSettingsId");
                        });

                    b.OwnsOne("Core.Models.Notification.NotificationTypeSettings", "Types", b1 =>
                        {
                            b1.Property<int>("NotificationSettingsId")
                                .HasColumnType("integer");

                            b1.Property<bool>("Achievement")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Alert")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Diet")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Message")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Plan")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Reminder")
                                .HasColumnType("boolean");

                            b1.Property<bool>("System")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Workout")
                                .HasColumnType("boolean");

                            b1.HasKey("NotificationSettingsId");

                            b1.ToTable("NotificationSettings");

                            b1.WithOwner()
                                .HasForeignKey("NotificationSettingsId");
                        });

                    b.OwnsOne("Core.Models.Notification.QuietHours", "QuietHours", b1 =>
                        {
                            b1.Property<int>("NotificationSettingsId")
                                .HasColumnType("integer");

                            b1.Property<bool>("Enabled")
                                .HasColumnType("boolean");

                            b1.Property<string>("EndTime")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)");

                            b1.Property<string>("StartTime")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)");

                            b1.HasKey("NotificationSettingsId");

                            b1.ToTable("NotificationSettings");

                            b1.WithOwner()
                                .HasForeignKey("NotificationSettingsId");
                        });

                    b.Navigation("Categories")
                        .IsRequired();

                    b.Navigation("QuietHours")
                        .IsRequired();

                    b.Navigation("Types")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Notification.NotificationSubscription", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Nutrition.FoodMicronutrient", b =>
                {
                    b.HasOne("Core.Models.Diet.Food", "Food")
                        .WithMany("Micronutrients")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Nutrition.MicronutrientType", "MicronutrientType")
                        .WithMany()
                        .HasForeignKey("MicronutrientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("MicronutrientType");
                });

            modelBuilder.Entity("Core.Models.Plan.Plan", b =>
                {
                    b.HasOne("Core.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "Nutritionist")
                        .WithMany()
                        .HasForeignKey("NutritionistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Nutritionist");
                });

            modelBuilder.Entity("Core.Models.Plan.PlanFood", b =>
                {
                    b.HasOne("Core.Models.Plan.PlanMeal", "PlanMeal")
                        .WithMany("Foods")
                        .HasForeignKey("PlanMealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Models.MacroNutrients", "Macros", b1 =>
                        {
                            b1.Property<int>("PlanFoodId")
                                .HasColumnType("integer");

                            b1.Property<int>("Carbs")
                                .HasColumnType("integer");

                            b1.Property<int>("Fat")
                                .HasColumnType("integer");

                            b1.Property<int?>("Fiber")
                                .HasColumnType("integer");

                            b1.Property<int>("Protein")
                                .HasColumnType("integer");

                            b1.Property<int?>("Sodium")
                                .HasColumnType("integer");

                            b1.Property<int?>("Sugar")
                                .HasColumnType("integer");

                            b1.HasKey("PlanFoodId");

                            b1.ToTable("PlanFoods");

                            b1.WithOwner()
                                .HasForeignKey("PlanFoodId");
                        });

                    b.Navigation("Macros")
                        .IsRequired();

                    b.Navigation("PlanMeal");
                });

            modelBuilder.Entity("Core.Models.Plan.PlanGoal", b =>
                {
                    b.HasOne("Core.Models.Plan.Plan", "Plan")
                        .WithMany("Goals")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Core.Models.Plan.PlanMeal", b =>
                {
                    b.HasOne("Core.Models.Plan.Plan", "Plan")
                        .WithMany("Meals")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Models.MacroNutrients", "Macros", b1 =>
                        {
                            b1.Property<int>("PlanMealId")
                                .HasColumnType("integer");

                            b1.Property<int>("Carbs")
                                .HasColumnType("integer");

                            b1.Property<int>("Fat")
                                .HasColumnType("integer");

                            b1.Property<int?>("Fiber")
                                .HasColumnType("integer");

                            b1.Property<int>("Protein")
                                .HasColumnType("integer");

                            b1.Property<int?>("Sodium")
                                .HasColumnType("integer");

                            b1.Property<int?>("Sugar")
                                .HasColumnType("integer");

                            b1.HasKey("PlanMealId");

                            b1.ToTable("PlanMeals");

                            b1.WithOwner()
                                .HasForeignKey("PlanMealId");
                        });

                    b.Navigation("Macros")
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Core.Models.Plan.PlanProgress", b =>
                {
                    b.HasOne("Core.Models.Plan.Plan", "Plan")
                        .WithMany("ProgressEntries")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Core.Models.Workout.WorkoutExercise", b =>
                {
                    b.HasOne("Core.Models.Workout.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Workout.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Core.Models.Workout.WorkoutProgress", b =>
                {
                    b.HasOne("Core.Models.Workout.Workout", "Workout")
                        .WithMany("WorkoutProgresses")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Core.Models.Client.Client", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Core.Models.Course.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Lessons");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Core.Models.Course.Enrollment", b =>
                {
                    b.Navigation("Progress");
                });

            modelBuilder.Entity("Core.Models.Course.Lesson", b =>
                {
                    b.Navigation("Progress");
                });

            modelBuilder.Entity("Core.Models.Diet.Diet", b =>
                {
                    b.Navigation("Meals");

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("Core.Models.Diet.DietMeal", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Core.Models.Diet.Food", b =>
                {
                    b.Navigation("MealFoods");

                    b.Navigation("Micronutrients");
                });

            modelBuilder.Entity("Core.Models.Message.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Core.Models.Message.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Core.Models.Plan.Plan", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("Meals");

                    b.Navigation("ProgressEntries");
                });

            modelBuilder.Entity("Core.Models.Plan.PlanMeal", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("Core.Models.Workout.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("Core.Models.Workout.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");

                    b.Navigation("WorkoutProgresses");
                });
#pragma warning restore 612, 618
        }
    }
}
